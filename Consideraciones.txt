En el modelo ItemPlanilla, lo ideal seria tener una clave primaria compuesta, entre las claves extranjeras a planilla y a paquete. Como loopback 
no soporta claves primarias compuestas (segun entiendo de la documentacion), se decidio tener un campo id en este modelo, y siempre que se agregue
o modifique una clave extranjera dentro de itemPlanilla, se debera chequear que no exista otro item referenciando al mismo paquete y planilla. Caso
contrario, el servidor devolvera un mensaje de error.

Las relaciones definidas no tienen integridad referencial, solo sirven para unir los modelos. Esto significa que aunque un paquete pertenece a un 
cliente, a la hora de crear un paquete se puede ingresar un username de cliente inexistente en la base, y la creacion es exitosa de todas formas. Esto 
se da debido a que la base de datos usada es una noSQL local, con respaldo en un archivo, por cuestiones de simplicidad. Si se usara una base de datos 
SQL, entonces estos mismos modelos y repositorios deberian poseer integridad referencial. Otra opcion es agregar codigo en las llamadas a API que creen 
o modifiquen una clave extranjera para controlar que se cumpla la integridad referencial. Sin embargo, ya que es a modo de ejercicio creo que esto no 
es necesario.

La funcionalidad de cargar de un csv esta realizada rusticamente, por ejemplo, no chequea la integridad del archivo previo a la carga de los paquetes,
ni realiza un rollback en caso de encontrar un error. Entonces, un archivo que contiene un error cargara los paquetes previos a la linea problematica,
cuando no deberia modificar la base de datos. Tambien, esta programado para levantar el archivo Paquetes.csv dentro de la carpeta CSV del directorio
del proyecto. Desde localhost:3000 existe una interfaz para poder subir este csv remotamente.

En el modelo ItemPlanilla existe una posicion. Asumo que esa posicion es la posicion que tiene dentro de la planilla. Para cumplir con esto, chequeo
la cantidad de items que tiene la planilla al momento de agregar un nuevo item, asi, la posicion se vuelve el conteo mas uno. Sin embargo falta 
controlar la posicion en el caso de borrado o modificado de idplanilla dentro de ItemPlanilla. Cuando se borra o modifica un item, se debe modificar
el item con la posicion mas alta, a la posicion del que se borro, siempre y cuando el eliminado o modificado no haya sido el de la posicion mas alta.
